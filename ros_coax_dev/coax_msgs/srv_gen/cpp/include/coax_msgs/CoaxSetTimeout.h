/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/srv/CoaxSetTimeout.srv */
#ifndef COAX_MSGS_SERVICE_COAXSETTIMEOUT_H
#define COAX_MSGS_SERVICE_COAXSETTIMEOUT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxSetTimeoutRequest_ : public ros::Message
{
  typedef CoaxSetTimeoutRequest_<ContainerAllocator> Type;

  CoaxSetTimeoutRequest_()
  : control_timeout_ms(0)
  , watchdog_timeout_ms(0)
  {
  }

  CoaxSetTimeoutRequest_(const ContainerAllocator& _alloc)
  : control_timeout_ms(0)
  , watchdog_timeout_ms(0)
  {
  }

  typedef uint16_t _control_timeout_ms_type;
  uint16_t control_timeout_ms;

  typedef uint16_t _watchdog_timeout_ms_type;
  uint16_t watchdog_timeout_ms;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxSetTimeoutRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "45bad13c1626ad94376f1dd77e9db023"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "717279abbcbf88c43fdc682100d3c16d"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint16 control_timeout_ms\n\
uint16 watchdog_timeout_ms\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, control_timeout_ms);
    ros::serialization::serialize(stream, watchdog_timeout_ms);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, control_timeout_ms);
    ros::serialization::deserialize(stream, watchdog_timeout_ms);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(control_timeout_ms);
    size += ros::serialization::serializationLength(watchdog_timeout_ms);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxSetTimeoutRequest
typedef  ::coax_msgs::CoaxSetTimeoutRequest_<std::allocator<void> > CoaxSetTimeoutRequest;

typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutRequest> CoaxSetTimeoutRequestPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutRequest const> CoaxSetTimeoutRequestConstPtr;


template <class ContainerAllocator>
struct CoaxSetTimeoutResponse_ : public ros::Message
{
  typedef CoaxSetTimeoutResponse_<ContainerAllocator> Type;

  CoaxSetTimeoutResponse_()
  : result(0)
  {
  }

  CoaxSetTimeoutResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxSetTimeoutResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4414c67819626a1b8e0f043a9a0d6c9a"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "717279abbcbf88c43fdc682100d3c16d"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 result\n\
\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxSetTimeoutResponse
typedef  ::coax_msgs::CoaxSetTimeoutResponse_<std::allocator<void> > CoaxSetTimeoutResponse;

typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutResponse> CoaxSetTimeoutResponsePtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxSetTimeoutResponse const> CoaxSetTimeoutResponseConstPtr;

struct CoaxSetTimeout
{

typedef CoaxSetTimeoutRequest Request;
typedef CoaxSetTimeoutResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CoaxSetTimeout
} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "45bad13c1626ad94376f1dd77e9db023";
  }

  static const char* value(const  ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x45bad13c1626ad94ULL;
  static const uint64_t static_value2 = 0x376f1dd77e9db023ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetTimeoutRequest";
  }

  static const char* value(const  ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 control_timeout_ms\n\
uint16 watchdog_timeout_ms\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetTimeoutResponse";
  }

  static const char* value(const  ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.control_timeout_ms);
    stream.next(m.watchdog_timeout_ms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxSetTimeoutRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxSetTimeoutResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coax_msgs::CoaxSetTimeout> {
  static const char* value() 
  {
    return "717279abbcbf88c43fdc682100d3c16d";
  }

  static const char* value(const coax_msgs::CoaxSetTimeout&) { return value(); } 
};

template<>
struct DataType<coax_msgs::CoaxSetTimeout> {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetTimeout";
  }

  static const char* value(const coax_msgs::CoaxSetTimeout&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "717279abbcbf88c43fdc682100d3c16d";
  }

  static const char* value(const coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetTimeout";
  }

  static const char* value(const coax_msgs::CoaxSetTimeoutRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "717279abbcbf88c43fdc682100d3c16d";
  }

  static const char* value(const coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetTimeout";
  }

  static const char* value(const coax_msgs::CoaxSetTimeoutResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COAX_MSGS_SERVICE_COAXSETTIMEOUT_H


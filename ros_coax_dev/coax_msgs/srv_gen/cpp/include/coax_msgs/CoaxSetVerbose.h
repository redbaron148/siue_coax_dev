/* Auto-generated by genmsg_cpp for file /home/coax/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/srv/CoaxSetVerbose.srv */
#ifndef COAX_MSGS_SERVICE_COAXSETVERBOSE_H
#define COAX_MSGS_SERVICE_COAXSETVERBOSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxSetVerboseRequest_ : public ros::Message
{
  typedef CoaxSetVerboseRequest_<ContainerAllocator> Type;

  CoaxSetVerboseRequest_()
  : verbose(0)
  , channel(0)
  {
  }

  CoaxSetVerboseRequest_(const ContainerAllocator& _alloc)
  : verbose(0)
  , channel(0)
  {
  }

  typedef uint8_t _verbose_type;
  uint8_t verbose;

  typedef uint8_t _channel_type;
  uint8_t channel;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxSetVerboseRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5a5271f332fcd970c0d092b725861893"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a5656957cc9c1010a24927dc8f7dc869"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 verbose\n\
uint8 channel\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, verbose);
    ros::serialization::serialize(stream, channel);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, verbose);
    ros::serialization::deserialize(stream, channel);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(verbose);
    size += ros::serialization::serializationLength(channel);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxSetVerboseRequest
typedef  ::coax_msgs::CoaxSetVerboseRequest_<std::allocator<void> > CoaxSetVerboseRequest;

typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseRequest> CoaxSetVerboseRequestPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseRequest const> CoaxSetVerboseRequestConstPtr;


template <class ContainerAllocator>
struct CoaxSetVerboseResponse_ : public ros::Message
{
  typedef CoaxSetVerboseResponse_<ContainerAllocator> Type;

  CoaxSetVerboseResponse_()
  : result(0)
  {
  }

  CoaxSetVerboseResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxSetVerboseResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4414c67819626a1b8e0f043a9a0d6c9a"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a5656957cc9c1010a24927dc8f7dc869"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 result\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxSetVerboseResponse
typedef  ::coax_msgs::CoaxSetVerboseResponse_<std::allocator<void> > CoaxSetVerboseResponse;

typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseResponse> CoaxSetVerboseResponsePtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxSetVerboseResponse const> CoaxSetVerboseResponseConstPtr;

struct CoaxSetVerbose
{

typedef CoaxSetVerboseRequest Request;
typedef CoaxSetVerboseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CoaxSetVerbose
} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5a5271f332fcd970c0d092b725861893";
  }

  static const char* value(const  ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5a5271f332fcd970ULL;
  static const uint64_t static_value2 = 0xc0d092b725861893ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetVerboseRequest";
  }

  static const char* value(const  ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 verbose\n\
uint8 channel\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetVerboseResponse";
  }

  static const char* value(const  ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.verbose);
    stream.next(m.channel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxSetVerboseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxSetVerboseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coax_msgs::CoaxSetVerbose> {
  static const char* value() 
  {
    return "a5656957cc9c1010a24927dc8f7dc869";
  }

  static const char* value(const coax_msgs::CoaxSetVerbose&) { return value(); } 
};

template<>
struct DataType<coax_msgs::CoaxSetVerbose> {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetVerbose";
  }

  static const char* value(const coax_msgs::CoaxSetVerbose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5656957cc9c1010a24927dc8f7dc869";
  }

  static const char* value(const coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetVerbose";
  }

  static const char* value(const coax_msgs::CoaxSetVerboseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5656957cc9c1010a24927dc8f7dc869";
  }

  static const char* value(const coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSetVerbose";
  }

  static const char* value(const coax_msgs::CoaxSetVerboseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COAX_MSGS_SERVICE_COAXSETVERBOSE_H


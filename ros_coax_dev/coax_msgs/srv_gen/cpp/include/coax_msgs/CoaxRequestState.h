/* Auto-generated by genmsg_cpp for file /home/coax/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/srv/CoaxRequestState.srv */
#ifndef COAX_MSGS_SERVICE_COAXREQUESTSTATE_H
#define COAX_MSGS_SERVICE_COAXREQUESTSTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "coax_msgs/CoaxState.h"

namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxRequestStateRequest_ : public ros::Message
{
  typedef CoaxRequestStateRequest_<ContainerAllocator> Type;

  CoaxRequestStateRequest_()
  : contents(0)
  {
  }

  CoaxRequestStateRequest_(const ContainerAllocator& _alloc)
  : contents(0)
  {
  }

  typedef uint32_t _contents_type;
  uint32_t contents;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxRequestStateRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "348fe2cc71120f4496a69790cdcccdf4"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "c48ce683e12ad9d0e530beb095838004"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint32 contents\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, contents);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, contents);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(contents);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxRequestStateRequest
typedef  ::coax_msgs::CoaxRequestStateRequest_<std::allocator<void> > CoaxRequestStateRequest;

typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateRequest> CoaxRequestStateRequestPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateRequest const> CoaxRequestStateRequestConstPtr;


template <class ContainerAllocator>
struct CoaxRequestStateResponse_ : public ros::Message
{
  typedef CoaxRequestStateResponse_<ContainerAllocator> Type;

  CoaxRequestStateResponse_()
  : state()
  {
  }

  CoaxRequestStateResponse_(const ContainerAllocator& _alloc)
  : state(_alloc)
  {
  }

  typedef  ::coax_msgs::CoaxState_<ContainerAllocator>  _state_type;
   ::coax_msgs::CoaxState_<ContainerAllocator>  state;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxRequestStateResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a2aab5ad3b91c710747a48adb6c7c7f2"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "c48ce683e12ad9d0e530beb095838004"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "CoaxState state\n\
\n\
\n\
\n\
================================================================================\n\
MSG: coax_msgs/CoaxState\n\
Header header\n\
# Error status set by the helicopter */\n\
uint8 errorFlags\n\
# \n\
#	 Affected content in this data structure (\n\
#    Use AND with the SBS_... flags above to check the content  \n\
#    e.g: if (state.content & SBS_RPY) {  \n\
#   			compute_odo(state.roll,state.pitch,state.yaw)  \n\
#   		}  \n\
#    This content should correspond to what has been configured in  \n\
#    sbConfigureComm or requested in sbRequestState  *#\n\
uint32 content\n\
# timestamp of the last update, in ms since the initialisation of the\n\
#  helicopter. *#\n\
uint32 timeStamp\n\
# current control timeout (for sending command in SB_NAV_CTRLLED mode) */\n\
uint16 controlTimeout\n\
# current comm timeout, to bring the helicopter back to safety is\n\
#  communication is not maintained. *#\n\
uint16 watchdogTimeout\n\
# Various bit field to represent the system configuration*/\n\
CoaxModes mode\n\
\n\
# Current helicopter attitude */\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
# GYRO data */\n\
float32[3] gyro\n\
# Accelerometer data */\n\
float32[3] accel\n\
# Magnetometer data */\n\
float32[3] magneto\n\
# Temperature measured by IMU */\n\
float32 imutemp\n\
# Range measurement in the vertical direction */\n\
float32 zrange\n\
# Filtered altitude, as used by the altitude control in POS mode */\n\
float32 zfiltered\n\
# Output of pressure sensor */\n\
float32 pressure\n\
# Range measurements in the horizontal plane. Sensor placement is\n\
#  platform dependent *#\n\
float32[4] hranges\n\
# Distance to closest obstacle (if implemented) */\n\
float32 xrel\n\
float32 yrel\n\
# Battery voltage */\n\
float32 battery\n\
# Output of the remote control channel, normalised to [-1,1] */\n\
float32[8] rcChannel\n\
\n\
# symbols below may be suppressed in future version of the library */\n\
\n\
# Output of attitude control (semantic unclear) */\n\
float32[3] o_attitude\n\
# Output of altitude control, i.e. thrust to keep the helicopter affloat32  */\n\
float32 o_altitude\n\
# Output of take-off/landing control (semantic unclear) */\n\
float32 o_tol\n\
# ??? (semantic unclear) */\n\
float32[2] o_xy\n\
# ??? (semantic unclear) */\n\
float32[2] o_oavoid\n\
\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: coax_msgs/CoaxModes\n\
# Navigation mode: SB_NAV_... */\n\
uint8 navigation\n\
# Communication mode: SB_COM_... */\n\
uint8 communication\n\
# Obstacle avoidance mode: or of SB_OA_... */\n\
uint8 oavoid\n\
# Control mode for roll axis: SB_CTRL_... */\n\
uint8 rollAxis\n\
# Control mode for pitch axis: SB_CTRL_... */\n\
uint8 pitchAxis\n\
# Control mode for yaw axis: SB_CTRL_... */\n\
uint8 yawAxis\n\
# Control mode for altitude axis: SB_CTRL_... */\n\
uint8 altAxis\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxRequestStateResponse
typedef  ::coax_msgs::CoaxRequestStateResponse_<std::allocator<void> > CoaxRequestStateResponse;

typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateResponse> CoaxRequestStateResponsePtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxRequestStateResponse const> CoaxRequestStateResponseConstPtr;

struct CoaxRequestState
{

typedef CoaxRequestStateRequest Request;
typedef CoaxRequestStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CoaxRequestState
} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "348fe2cc71120f4496a69790cdcccdf4";
  }

  static const char* value(const  ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x348fe2cc71120f44ULL;
  static const uint64_t static_value2 = 0x96a69790cdcccdf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxRequestStateRequest";
  }

  static const char* value(const  ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 contents\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a2aab5ad3b91c710747a48adb6c7c7f2";
  }

  static const char* value(const  ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa2aab5ad3b91c710ULL;
  static const uint64_t static_value2 = 0x747a48adb6c7c7f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxRequestStateResponse";
  }

  static const char* value(const  ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CoaxState state\n\
\n\
\n\
\n\
================================================================================\n\
MSG: coax_msgs/CoaxState\n\
Header header\n\
# Error status set by the helicopter */\n\
uint8 errorFlags\n\
# \n\
#	 Affected content in this data structure (\n\
#    Use AND with the SBS_... flags above to check the content  \n\
#    e.g: if (state.content & SBS_RPY) {  \n\
#   			compute_odo(state.roll,state.pitch,state.yaw)  \n\
#   		}  \n\
#    This content should correspond to what has been configured in  \n\
#    sbConfigureComm or requested in sbRequestState  *#\n\
uint32 content\n\
# timestamp of the last update, in ms since the initialisation of the\n\
#  helicopter. *#\n\
uint32 timeStamp\n\
# current control timeout (for sending command in SB_NAV_CTRLLED mode) */\n\
uint16 controlTimeout\n\
# current comm timeout, to bring the helicopter back to safety is\n\
#  communication is not maintained. *#\n\
uint16 watchdogTimeout\n\
# Various bit field to represent the system configuration*/\n\
CoaxModes mode\n\
\n\
# Current helicopter attitude */\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
# GYRO data */\n\
float32[3] gyro\n\
# Accelerometer data */\n\
float32[3] accel\n\
# Magnetometer data */\n\
float32[3] magneto\n\
# Temperature measured by IMU */\n\
float32 imutemp\n\
# Range measurement in the vertical direction */\n\
float32 zrange\n\
# Filtered altitude, as used by the altitude control in POS mode */\n\
float32 zfiltered\n\
# Output of pressure sensor */\n\
float32 pressure\n\
# Range measurements in the horizontal plane. Sensor placement is\n\
#  platform dependent *#\n\
float32[4] hranges\n\
# Distance to closest obstacle (if implemented) */\n\
float32 xrel\n\
float32 yrel\n\
# Battery voltage */\n\
float32 battery\n\
# Output of the remote control channel, normalised to [-1,1] */\n\
float32[8] rcChannel\n\
\n\
# symbols below may be suppressed in future version of the library */\n\
\n\
# Output of attitude control (semantic unclear) */\n\
float32[3] o_attitude\n\
# Output of altitude control, i.e. thrust to keep the helicopter affloat32  */\n\
float32 o_altitude\n\
# Output of take-off/landing control (semantic unclear) */\n\
float32 o_tol\n\
# ??? (semantic unclear) */\n\
float32[2] o_xy\n\
# ??? (semantic unclear) */\n\
float32[2] o_oavoid\n\
\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: coax_msgs/CoaxModes\n\
# Navigation mode: SB_NAV_... */\n\
uint8 navigation\n\
# Communication mode: SB_COM_... */\n\
uint8 communication\n\
# Obstacle avoidance mode: or of SB_OA_... */\n\
uint8 oavoid\n\
# Control mode for roll axis: SB_CTRL_... */\n\
uint8 rollAxis\n\
# Control mode for pitch axis: SB_CTRL_... */\n\
uint8 pitchAxis\n\
# Control mode for yaw axis: SB_CTRL_... */\n\
uint8 yawAxis\n\
# Control mode for altitude axis: SB_CTRL_... */\n\
uint8 altAxis\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.contents);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxRequestStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxRequestStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coax_msgs::CoaxRequestState> {
  static const char* value() 
  {
    return "c48ce683e12ad9d0e530beb095838004";
  }

  static const char* value(const coax_msgs::CoaxRequestState&) { return value(); } 
};

template<>
struct DataType<coax_msgs::CoaxRequestState> {
  static const char* value() 
  {
    return "coax_msgs/CoaxRequestState";
  }

  static const char* value(const coax_msgs::CoaxRequestState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c48ce683e12ad9d0e530beb095838004";
  }

  static const char* value(const coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxRequestState";
  }

  static const char* value(const coax_msgs::CoaxRequestStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c48ce683e12ad9d0e530beb095838004";
  }

  static const char* value(const coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxRequestState";
  }

  static const char* value(const coax_msgs::CoaxRequestStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COAX_MSGS_SERVICE_COAXREQUESTSTATE_H


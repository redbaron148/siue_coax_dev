/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/srv/Coax3DSetControlMode.srv */
#ifndef COAX_MSGS_SERVICE_COAX3DSETCONTROLMODE_H
#define COAX_MSGS_SERVICE_COAX3DSETCONTROLMODE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace coax_msgs
{
template <class ContainerAllocator>
struct Coax3DSetControlModeRequest_ : public ros::Message
{
  typedef Coax3DSetControlModeRequest_<ContainerAllocator> Type;

  Coax3DSetControlModeRequest_()
  : mode(0)
  {
  }

  Coax3DSetControlModeRequest_(const ContainerAllocator& _alloc)
  : mode(0)
  {
  }

  typedef uint8_t _mode_type;
  uint8_t mode;

  enum { stopMode = 0 };
  enum { nocontrolMode = 1 };
  enum { velocityMode = 2 };
  enum { positionMode = 3 };

private:
  static const char* __s_getDataType_() { return "coax_msgs/Coax3DSetControlModeRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b33763b328928f70ed60e24a5cf8e4f1"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "89de998d8a18d3b85b052c5aba0c2fa0"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 stopMode = 0\n\
uint8 nocontrolMode = 1\n\
uint8 velocityMode = 2\n\
uint8 positionMode = 3\n\
uint8 mode\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, mode);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, mode);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(mode);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct Coax3DSetControlModeRequest
typedef  ::coax_msgs::Coax3DSetControlModeRequest_<std::allocator<void> > Coax3DSetControlModeRequest;

typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeRequest> Coax3DSetControlModeRequestPtr;
typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeRequest const> Coax3DSetControlModeRequestConstPtr;


template <class ContainerAllocator>
struct Coax3DSetControlModeResponse_ : public ros::Message
{
  typedef Coax3DSetControlModeResponse_<ContainerAllocator> Type;

  Coax3DSetControlModeResponse_()
  : result(0)
  {
  }

  Coax3DSetControlModeResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


private:
  static const char* __s_getDataType_() { return "coax_msgs/Coax3DSetControlModeResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4414c67819626a1b8e0f043a9a0d6c9a"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "89de998d8a18d3b85b052c5aba0c2fa0"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 result\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct Coax3DSetControlModeResponse
typedef  ::coax_msgs::Coax3DSetControlModeResponse_<std::allocator<void> > Coax3DSetControlModeResponse;

typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeResponse> Coax3DSetControlModeResponsePtr;
typedef boost::shared_ptr< ::coax_msgs::Coax3DSetControlModeResponse const> Coax3DSetControlModeResponseConstPtr;

struct Coax3DSetControlMode
{

typedef Coax3DSetControlModeRequest Request;
typedef Coax3DSetControlModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Coax3DSetControlMode
} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b33763b328928f70ed60e24a5cf8e4f1";
  }

  static const char* value(const  ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb33763b328928f70ULL;
  static const uint64_t static_value2 = 0xed60e24a5cf8e4f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/Coax3DSetControlModeRequest";
  }

  static const char* value(const  ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 stopMode = 0\n\
uint8 nocontrolMode = 1\n\
uint8 velocityMode = 2\n\
uint8 positionMode = 3\n\
uint8 mode\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/Coax3DSetControlModeResponse";
  }

  static const char* value(const  ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Coax3DSetControlModeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Coax3DSetControlModeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<coax_msgs::Coax3DSetControlMode> {
  static const char* value() 
  {
    return "89de998d8a18d3b85b052c5aba0c2fa0";
  }

  static const char* value(const coax_msgs::Coax3DSetControlMode&) { return value(); } 
};

template<>
struct DataType<coax_msgs::Coax3DSetControlMode> {
  static const char* value() 
  {
    return "coax_msgs/Coax3DSetControlMode";
  }

  static const char* value(const coax_msgs::Coax3DSetControlMode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89de998d8a18d3b85b052c5aba0c2fa0";
  }

  static const char* value(const coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/Coax3DSetControlMode";
  }

  static const char* value(const coax_msgs::Coax3DSetControlModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89de998d8a18d3b85b052c5aba0c2fa0";
  }

  static const char* value(const coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/Coax3DSetControlMode";
  }

  static const char* value(const coax_msgs::Coax3DSetControlModeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COAX_MSGS_SERVICE_COAX3DSETCONTROLMODE_H


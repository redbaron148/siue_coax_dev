/* Auto-generated by genmsg_cpp for file /home/coax/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/msg/CoaxState.msg */
#ifndef COAX_MSGS_MESSAGE_COAXSTATE_H
#define COAX_MSGS_MESSAGE_COAXSTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "coax_msgs/CoaxModes.h"

namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxState_ : public ros::Message
{
  typedef CoaxState_<ContainerAllocator> Type;

  CoaxState_()
  : header()
  , errorFlags(0)
  , content(0)
  , timeStamp(0)
  , controlTimeout(0)
  , watchdogTimeout(0)
  , mode()
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , gyro()
  , accel()
  , magneto()
  , imutemp(0.0)
  , zrange(0.0)
  , zfiltered(0.0)
  , pressure(0.0)
  , hranges()
  , xrel(0.0)
  , yrel(0.0)
  , battery(0.0)
  , rcChannel()
  , o_attitude()
  , o_altitude(0.0)
  , o_tol(0.0)
  , o_xy()
  , o_oavoid()
  {
    gyro.assign(0.0);
    accel.assign(0.0);
    magneto.assign(0.0);
    hranges.assign(0.0);
    rcChannel.assign(0.0);
    o_attitude.assign(0.0);
    o_xy.assign(0.0);
    o_oavoid.assign(0.0);
  }

  CoaxState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , errorFlags(0)
  , content(0)
  , timeStamp(0)
  , controlTimeout(0)
  , watchdogTimeout(0)
  , mode(_alloc)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , gyro()
  , accel()
  , magneto()
  , imutemp(0.0)
  , zrange(0.0)
  , zfiltered(0.0)
  , pressure(0.0)
  , hranges()
  , xrel(0.0)
  , yrel(0.0)
  , battery(0.0)
  , rcChannel()
  , o_attitude()
  , o_altitude(0.0)
  , o_tol(0.0)
  , o_xy()
  , o_oavoid()
  {
    gyro.assign(0.0);
    accel.assign(0.0);
    magneto.assign(0.0);
    hranges.assign(0.0);
    rcChannel.assign(0.0);
    o_attitude.assign(0.0);
    o_xy.assign(0.0);
    o_oavoid.assign(0.0);
  }

  typedef  ::roslib::Header_<ContainerAllocator>  _header_type;
   ::roslib::Header_<ContainerAllocator>  header;

  typedef uint8_t _errorFlags_type;
  uint8_t errorFlags;

  typedef uint32_t _content_type;
  uint32_t content;

  typedef uint32_t _timeStamp_type;
  uint32_t timeStamp;

  typedef uint16_t _controlTimeout_type;
  uint16_t controlTimeout;

  typedef uint16_t _watchdogTimeout_type;
  uint16_t watchdogTimeout;

  typedef  ::coax_msgs::CoaxModes_<ContainerAllocator>  _mode_type;
   ::coax_msgs::CoaxModes_<ContainerAllocator>  mode;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;

  typedef boost::array<float, 3>  _gyro_type;
  boost::array<float, 3>  gyro;

  typedef boost::array<float, 3>  _accel_type;
  boost::array<float, 3>  accel;

  typedef boost::array<float, 3>  _magneto_type;
  boost::array<float, 3>  magneto;

  typedef float _imutemp_type;
  float imutemp;

  typedef float _zrange_type;
  float zrange;

  typedef float _zfiltered_type;
  float zfiltered;

  typedef float _pressure_type;
  float pressure;

  typedef boost::array<float, 4>  _hranges_type;
  boost::array<float, 4>  hranges;

  typedef float _xrel_type;
  float xrel;

  typedef float _yrel_type;
  float yrel;

  typedef float _battery_type;
  float battery;

  typedef boost::array<float, 8>  _rcChannel_type;
  boost::array<float, 8>  rcChannel;

  typedef boost::array<float, 3>  _o_attitude_type;
  boost::array<float, 3>  o_attitude;

  typedef float _o_altitude_type;
  float o_altitude;

  typedef float _o_tol_type;
  float o_tol;

  typedef boost::array<float, 2>  _o_xy_type;
  boost::array<float, 2>  o_xy;

  typedef boost::array<float, 2>  _o_oavoid_type;
  boost::array<float, 2>  o_oavoid;


  ROSCPP_DEPRECATED uint32_t get_gyro_size() const { return (uint32_t)gyro.size(); }
  ROSCPP_DEPRECATED uint32_t get_accel_size() const { return (uint32_t)accel.size(); }
  ROSCPP_DEPRECATED uint32_t get_magneto_size() const { return (uint32_t)magneto.size(); }
  ROSCPP_DEPRECATED uint32_t get_hranges_size() const { return (uint32_t)hranges.size(); }
  ROSCPP_DEPRECATED uint32_t get_rcChannel_size() const { return (uint32_t)rcChannel.size(); }
  ROSCPP_DEPRECATED uint32_t get_o_attitude_size() const { return (uint32_t)o_attitude.size(); }
  ROSCPP_DEPRECATED uint32_t get_o_xy_size() const { return (uint32_t)o_xy.size(); }
  ROSCPP_DEPRECATED uint32_t get_o_oavoid_size() const { return (uint32_t)o_oavoid.size(); }
private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxState"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "05663407b1d685a3132efbff03046970"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
# Error status set by the helicopter */\n\
uint8 errorFlags\n\
# \n\
#	 Affected content in this data structure (\n\
#    Use AND with the SBS_... flags above to check the content  \n\
#    e.g: if (state.content & SBS_RPY) {  \n\
#   			compute_odo(state.roll,state.pitch,state.yaw)  \n\
#   		}  \n\
#    This content should correspond to what has been configured in  \n\
#    sbConfigureComm or requested in sbRequestState  *#\n\
uint32 content\n\
# timestamp of the last update, in ms since the initialisation of the\n\
#  helicopter. *#\n\
uint32 timeStamp\n\
# current control timeout (for sending command in SB_NAV_CTRLLED mode) */\n\
uint16 controlTimeout\n\
# current comm timeout, to bring the helicopter back to safety is\n\
#  communication is not maintained. *#\n\
uint16 watchdogTimeout\n\
# Various bit field to represent the system configuration*/\n\
CoaxModes mode\n\
\n\
# Current helicopter attitude */\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
# GYRO data */\n\
float32[3] gyro\n\
# Accelerometer data */\n\
float32[3] accel\n\
# Magnetometer data */\n\
float32[3] magneto\n\
# Temperature measured by IMU */\n\
float32 imutemp\n\
# Range measurement in the vertical direction */\n\
float32 zrange\n\
# Filtered altitude, as used by the altitude control in POS mode */\n\
float32 zfiltered\n\
# Output of pressure sensor */\n\
float32 pressure\n\
# Range measurements in the horizontal plane. Sensor placement is\n\
#  platform dependent *#\n\
float32[4] hranges\n\
# Distance to closest obstacle (if implemented) */\n\
float32 xrel\n\
float32 yrel\n\
# Battery voltage */\n\
float32 battery\n\
# Output of the remote control channel, normalised to [-1,1] */\n\
float32[8] rcChannel\n\
\n\
# symbols below may be suppressed in future version of the library */\n\
\n\
# Output of attitude control (semantic unclear) */\n\
float32[3] o_attitude\n\
# Output of altitude control, i.e. thrust to keep the helicopter affloat32  */\n\
float32 o_altitude\n\
# Output of take-off/landing control (semantic unclear) */\n\
float32 o_tol\n\
# ??? (semantic unclear) */\n\
float32[2] o_xy\n\
# ??? (semantic unclear) */\n\
float32[2] o_oavoid\n\
\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: coax_msgs/CoaxModes\n\
# Navigation mode: SB_NAV_... */\n\
uint8 navigation\n\
# Communication mode: SB_COM_... */\n\
uint8 communication\n\
# Obstacle avoidance mode: or of SB_OA_... */\n\
uint8 oavoid\n\
# Control mode for roll axis: SB_CTRL_... */\n\
uint8 rollAxis\n\
# Control mode for pitch axis: SB_CTRL_... */\n\
uint8 pitchAxis\n\
# Control mode for yaw axis: SB_CTRL_... */\n\
uint8 yawAxis\n\
# Control mode for altitude axis: SB_CTRL_... */\n\
uint8 altAxis\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, errorFlags);
    ros::serialization::serialize(stream, content);
    ros::serialization::serialize(stream, timeStamp);
    ros::serialization::serialize(stream, controlTimeout);
    ros::serialization::serialize(stream, watchdogTimeout);
    ros::serialization::serialize(stream, mode);
    ros::serialization::serialize(stream, roll);
    ros::serialization::serialize(stream, pitch);
    ros::serialization::serialize(stream, yaw);
    ros::serialization::serialize(stream, gyro);
    ros::serialization::serialize(stream, accel);
    ros::serialization::serialize(stream, magneto);
    ros::serialization::serialize(stream, imutemp);
    ros::serialization::serialize(stream, zrange);
    ros::serialization::serialize(stream, zfiltered);
    ros::serialization::serialize(stream, pressure);
    ros::serialization::serialize(stream, hranges);
    ros::serialization::serialize(stream, xrel);
    ros::serialization::serialize(stream, yrel);
    ros::serialization::serialize(stream, battery);
    ros::serialization::serialize(stream, rcChannel);
    ros::serialization::serialize(stream, o_attitude);
    ros::serialization::serialize(stream, o_altitude);
    ros::serialization::serialize(stream, o_tol);
    ros::serialization::serialize(stream, o_xy);
    ros::serialization::serialize(stream, o_oavoid);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, errorFlags);
    ros::serialization::deserialize(stream, content);
    ros::serialization::deserialize(stream, timeStamp);
    ros::serialization::deserialize(stream, controlTimeout);
    ros::serialization::deserialize(stream, watchdogTimeout);
    ros::serialization::deserialize(stream, mode);
    ros::serialization::deserialize(stream, roll);
    ros::serialization::deserialize(stream, pitch);
    ros::serialization::deserialize(stream, yaw);
    ros::serialization::deserialize(stream, gyro);
    ros::serialization::deserialize(stream, accel);
    ros::serialization::deserialize(stream, magneto);
    ros::serialization::deserialize(stream, imutemp);
    ros::serialization::deserialize(stream, zrange);
    ros::serialization::deserialize(stream, zfiltered);
    ros::serialization::deserialize(stream, pressure);
    ros::serialization::deserialize(stream, hranges);
    ros::serialization::deserialize(stream, xrel);
    ros::serialization::deserialize(stream, yrel);
    ros::serialization::deserialize(stream, battery);
    ros::serialization::deserialize(stream, rcChannel);
    ros::serialization::deserialize(stream, o_attitude);
    ros::serialization::deserialize(stream, o_altitude);
    ros::serialization::deserialize(stream, o_tol);
    ros::serialization::deserialize(stream, o_xy);
    ros::serialization::deserialize(stream, o_oavoid);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(errorFlags);
    size += ros::serialization::serializationLength(content);
    size += ros::serialization::serializationLength(timeStamp);
    size += ros::serialization::serializationLength(controlTimeout);
    size += ros::serialization::serializationLength(watchdogTimeout);
    size += ros::serialization::serializationLength(mode);
    size += ros::serialization::serializationLength(roll);
    size += ros::serialization::serializationLength(pitch);
    size += ros::serialization::serializationLength(yaw);
    size += ros::serialization::serializationLength(gyro);
    size += ros::serialization::serializationLength(accel);
    size += ros::serialization::serializationLength(magneto);
    size += ros::serialization::serializationLength(imutemp);
    size += ros::serialization::serializationLength(zrange);
    size += ros::serialization::serializationLength(zfiltered);
    size += ros::serialization::serializationLength(pressure);
    size += ros::serialization::serializationLength(hranges);
    size += ros::serialization::serializationLength(xrel);
    size += ros::serialization::serializationLength(yrel);
    size += ros::serialization::serializationLength(battery);
    size += ros::serialization::serializationLength(rcChannel);
    size += ros::serialization::serializationLength(o_attitude);
    size += ros::serialization::serializationLength(o_altitude);
    size += ros::serialization::serializationLength(o_tol);
    size += ros::serialization::serializationLength(o_xy);
    size += ros::serialization::serializationLength(o_oavoid);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxState_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxState
typedef  ::coax_msgs::CoaxState_<std::allocator<void> > CoaxState;

typedef boost::shared_ptr< ::coax_msgs::CoaxState> CoaxStatePtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxState const> CoaxStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::coax_msgs::CoaxState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::coax_msgs::CoaxState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "05663407b1d685a3132efbff03046970";
  }

  static const char* value(const  ::coax_msgs::CoaxState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x05663407b1d685a3ULL;
  static const uint64_t static_value2 = 0x132efbff03046970ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxState";
  }

  static const char* value(const  ::coax_msgs::CoaxState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
# Error status set by the helicopter */\n\
uint8 errorFlags\n\
# \n\
#	 Affected content in this data structure (\n\
#    Use AND with the SBS_... flags above to check the content  \n\
#    e.g: if (state.content & SBS_RPY) {  \n\
#   			compute_odo(state.roll,state.pitch,state.yaw)  \n\
#   		}  \n\
#    This content should correspond to what has been configured in  \n\
#    sbConfigureComm or requested in sbRequestState  *#\n\
uint32 content\n\
# timestamp of the last update, in ms since the initialisation of the\n\
#  helicopter. *#\n\
uint32 timeStamp\n\
# current control timeout (for sending command in SB_NAV_CTRLLED mode) */\n\
uint16 controlTimeout\n\
# current comm timeout, to bring the helicopter back to safety is\n\
#  communication is not maintained. *#\n\
uint16 watchdogTimeout\n\
# Various bit field to represent the system configuration*/\n\
CoaxModes mode\n\
\n\
# Current helicopter attitude */\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
# GYRO data */\n\
float32[3] gyro\n\
# Accelerometer data */\n\
float32[3] accel\n\
# Magnetometer data */\n\
float32[3] magneto\n\
# Temperature measured by IMU */\n\
float32 imutemp\n\
# Range measurement in the vertical direction */\n\
float32 zrange\n\
# Filtered altitude, as used by the altitude control in POS mode */\n\
float32 zfiltered\n\
# Output of pressure sensor */\n\
float32 pressure\n\
# Range measurements in the horizontal plane. Sensor placement is\n\
#  platform dependent *#\n\
float32[4] hranges\n\
# Distance to closest obstacle (if implemented) */\n\
float32 xrel\n\
float32 yrel\n\
# Battery voltage */\n\
float32 battery\n\
# Output of the remote control channel, normalised to [-1,1] */\n\
float32[8] rcChannel\n\
\n\
# symbols below may be suppressed in future version of the library */\n\
\n\
# Output of attitude control (semantic unclear) */\n\
float32[3] o_attitude\n\
# Output of altitude control, i.e. thrust to keep the helicopter affloat32  */\n\
float32 o_altitude\n\
# Output of take-off/landing control (semantic unclear) */\n\
float32 o_tol\n\
# ??? (semantic unclear) */\n\
float32[2] o_xy\n\
# ??? (semantic unclear) */\n\
float32[2] o_oavoid\n\
\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: coax_msgs/CoaxModes\n\
# Navigation mode: SB_NAV_... */\n\
uint8 navigation\n\
# Communication mode: SB_COM_... */\n\
uint8 communication\n\
# Obstacle avoidance mode: or of SB_OA_... */\n\
uint8 oavoid\n\
# Control mode for roll axis: SB_CTRL_... */\n\
uint8 rollAxis\n\
# Control mode for pitch axis: SB_CTRL_... */\n\
uint8 pitchAxis\n\
# Control mode for yaw axis: SB_CTRL_... */\n\
uint8 yawAxis\n\
# Control mode for altitude axis: SB_CTRL_... */\n\
uint8 altAxis\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::coax_msgs::CoaxState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.errorFlags);
    stream.next(m.content);
    stream.next(m.timeStamp);
    stream.next(m.controlTimeout);
    stream.next(m.watchdogTimeout);
    stream.next(m.mode);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
    stream.next(m.gyro);
    stream.next(m.accel);
    stream.next(m.magneto);
    stream.next(m.imutemp);
    stream.next(m.zrange);
    stream.next(m.zfiltered);
    stream.next(m.pressure);
    stream.next(m.hranges);
    stream.next(m.xrel);
    stream.next(m.yrel);
    stream.next(m.battery);
    stream.next(m.rcChannel);
    stream.next(m.o_attitude);
    stream.next(m.o_altitude);
    stream.next(m.o_tol);
    stream.next(m.o_xy);
    stream.next(m.o_oavoid);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coax_msgs::CoaxState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::coax_msgs::CoaxState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::roslib::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "errorFlags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.errorFlags);
    s << indent << "content: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.content);
    s << indent << "timeStamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "controlTimeout: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.controlTimeout);
    s << indent << "watchdogTimeout: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.watchdogTimeout);
    s << indent << "mode: ";
s << std::endl;
    Printer< ::coax_msgs::CoaxModes_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyro[i]);
    }
    s << indent << "accel[]" << std::endl;
    for (size_t i = 0; i < v.accel.size(); ++i)
    {
      s << indent << "  accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel[i]);
    }
    s << indent << "magneto[]" << std::endl;
    for (size_t i = 0; i < v.magneto.size(); ++i)
    {
      s << indent << "  magneto[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.magneto[i]);
    }
    s << indent << "imutemp: ";
    Printer<float>::stream(s, indent + "  ", v.imutemp);
    s << indent << "zrange: ";
    Printer<float>::stream(s, indent + "  ", v.zrange);
    s << indent << "zfiltered: ";
    Printer<float>::stream(s, indent + "  ", v.zfiltered);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "hranges[]" << std::endl;
    for (size_t i = 0; i < v.hranges.size(); ++i)
    {
      s << indent << "  hranges[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hranges[i]);
    }
    s << indent << "xrel: ";
    Printer<float>::stream(s, indent + "  ", v.xrel);
    s << indent << "yrel: ";
    Printer<float>::stream(s, indent + "  ", v.yrel);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "rcChannel[]" << std::endl;
    for (size_t i = 0; i < v.rcChannel.size(); ++i)
    {
      s << indent << "  rcChannel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rcChannel[i]);
    }
    s << indent << "o_attitude[]" << std::endl;
    for (size_t i = 0; i < v.o_attitude.size(); ++i)
    {
      s << indent << "  o_attitude[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.o_attitude[i]);
    }
    s << indent << "o_altitude: ";
    Printer<float>::stream(s, indent + "  ", v.o_altitude);
    s << indent << "o_tol: ";
    Printer<float>::stream(s, indent + "  ", v.o_tol);
    s << indent << "o_xy[]" << std::endl;
    for (size_t i = 0; i < v.o_xy.size(); ++i)
    {
      s << indent << "  o_xy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.o_xy[i]);
    }
    s << indent << "o_oavoid[]" << std::endl;
    for (size_t i = 0; i < v.o_oavoid.size(); ++i)
    {
      s << indent << "  o_oavoid[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.o_oavoid[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COAX_MSGS_MESSAGE_COAXSTATE_H


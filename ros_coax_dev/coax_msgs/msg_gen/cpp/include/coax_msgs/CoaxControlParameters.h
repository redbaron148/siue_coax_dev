/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/msg/CoaxControlParameters.msg */
#ifndef COAX_MSGS_MESSAGE_COAXCONTROLPARAMETERS_H
#define COAX_MSGS_MESSAGE_COAXCONTROLPARAMETERS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxControlParameters_ : public ros::Message
{
  typedef CoaxControlParameters_<ContainerAllocator> Type;

  CoaxControlParameters_()
  : baseThrust(0.0)
  , yawOffset(0.0)
  , altitudeKp(0.0)
  , altitudeKi(0.0)
  , altitudeKd(0.0)
  , yawKp(0.0)
  , yawKi(0.0)
  , yawKd(0.0)
  {
  }

  CoaxControlParameters_(const ContainerAllocator& _alloc)
  : baseThrust(0.0)
  , yawOffset(0.0)
  , altitudeKp(0.0)
  , altitudeKi(0.0)
  , altitudeKd(0.0)
  , yawKp(0.0)
  , yawKi(0.0)
  , yawKd(0.0)
  {
  }

  typedef float _baseThrust_type;
  float baseThrust;

  typedef float _yawOffset_type;
  float yawOffset;

  typedef float _altitudeKp_type;
  float altitudeKp;

  typedef float _altitudeKi_type;
  float altitudeKi;

  typedef float _altitudeKd_type;
  float altitudeKd;

  typedef float _yawKp_type;
  float yawKp;

  typedef float _yawKi_type;
  float yawKi;

  typedef float _yawKd_type;
  float yawKd;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxControlParameters"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c63db7fc4cf7a25c749b80856e6f5d4d"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Base thrust around which the control operates */\n\
float32 baseThrust\n\
# Difference of operating point between up and down motors */\n\
float32 yawOffset\n\
# Altitude gain: Kp*/\n\
float32 altitudeKp\n\
# Altitude gain: Ki*/\n\
float32 altitudeKi\n\
# Altitude gain: Kd*/\n\
float32 altitudeKd\n\
\n\
# Yaw gain: Kp*/\n\
float32 yawKp\n\
# Yaw gain: Ki*/\n\
float32 yawKi\n\
# Yaw gain: Kd*/\n\
float32 yawKd\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, baseThrust);
    ros::serialization::serialize(stream, yawOffset);
    ros::serialization::serialize(stream, altitudeKp);
    ros::serialization::serialize(stream, altitudeKi);
    ros::serialization::serialize(stream, altitudeKd);
    ros::serialization::serialize(stream, yawKp);
    ros::serialization::serialize(stream, yawKi);
    ros::serialization::serialize(stream, yawKd);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, baseThrust);
    ros::serialization::deserialize(stream, yawOffset);
    ros::serialization::deserialize(stream, altitudeKp);
    ros::serialization::deserialize(stream, altitudeKi);
    ros::serialization::deserialize(stream, altitudeKd);
    ros::serialization::deserialize(stream, yawKp);
    ros::serialization::deserialize(stream, yawKi);
    ros::serialization::deserialize(stream, yawKd);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(baseThrust);
    size += ros::serialization::serializationLength(yawOffset);
    size += ros::serialization::serializationLength(altitudeKp);
    size += ros::serialization::serializationLength(altitudeKi);
    size += ros::serialization::serializationLength(altitudeKd);
    size += ros::serialization::serializationLength(yawKp);
    size += ros::serialization::serializationLength(yawKi);
    size += ros::serialization::serializationLength(yawKd);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxControlParameters_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxControlParameters
typedef  ::coax_msgs::CoaxControlParameters_<std::allocator<void> > CoaxControlParameters;

typedef boost::shared_ptr< ::coax_msgs::CoaxControlParameters> CoaxControlParametersPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxControlParameters const> CoaxControlParametersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::coax_msgs::CoaxControlParameters_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c63db7fc4cf7a25c749b80856e6f5d4d";
  }

  static const char* value(const  ::coax_msgs::CoaxControlParameters_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc63db7fc4cf7a25cULL;
  static const uint64_t static_value2 = 0x749b80856e6f5d4dULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxControlParameters";
  }

  static const char* value(const  ::coax_msgs::CoaxControlParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Base thrust around which the control operates */\n\
float32 baseThrust\n\
# Difference of operating point between up and down motors */\n\
float32 yawOffset\n\
# Altitude gain: Kp*/\n\
float32 altitudeKp\n\
# Altitude gain: Ki*/\n\
float32 altitudeKi\n\
# Altitude gain: Kd*/\n\
float32 altitudeKd\n\
\n\
# Yaw gain: Kp*/\n\
float32 yawKp\n\
# Yaw gain: Ki*/\n\
float32 yawKi\n\
# Yaw gain: Kd*/\n\
float32 yawKd\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxControlParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.baseThrust);
    stream.next(m.yawOffset);
    stream.next(m.altitudeKp);
    stream.next(m.altitudeKi);
    stream.next(m.altitudeKd);
    stream.next(m.yawKp);
    stream.next(m.yawKi);
    stream.next(m.yawKd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxControlParameters_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coax_msgs::CoaxControlParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::coax_msgs::CoaxControlParameters_<ContainerAllocator> & v) 
  {
    s << indent << "baseThrust: ";
    Printer<float>::stream(s, indent + "  ", v.baseThrust);
    s << indent << "yawOffset: ";
    Printer<float>::stream(s, indent + "  ", v.yawOffset);
    s << indent << "altitudeKp: ";
    Printer<float>::stream(s, indent + "  ", v.altitudeKp);
    s << indent << "altitudeKi: ";
    Printer<float>::stream(s, indent + "  ", v.altitudeKi);
    s << indent << "altitudeKd: ";
    Printer<float>::stream(s, indent + "  ", v.altitudeKd);
    s << indent << "yawKp: ";
    Printer<float>::stream(s, indent + "  ", v.yawKp);
    s << indent << "yawKi: ";
    Printer<float>::stream(s, indent + "  ", v.yawKi);
    s << indent << "yawKd: ";
    Printer<float>::stream(s, indent + "  ", v.yawKd);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COAX_MSGS_MESSAGE_COAXCONTROLPARAMETERS_H


/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/msg/CoaxModes.msg */
#ifndef COAX_MSGS_MESSAGE_COAXMODES_H
#define COAX_MSGS_MESSAGE_COAXMODES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxModes_ : public ros::Message
{
  typedef CoaxModes_<ContainerAllocator> Type;

  CoaxModes_()
  : navigation(0)
  , communication(0)
  , oavoid(0)
  , rollAxis(0)
  , pitchAxis(0)
  , yawAxis(0)
  , altAxis(0)
  {
  }

  CoaxModes_(const ContainerAllocator& _alloc)
  : navigation(0)
  , communication(0)
  , oavoid(0)
  , rollAxis(0)
  , pitchAxis(0)
  , yawAxis(0)
  , altAxis(0)
  {
  }

  typedef uint8_t _navigation_type;
  uint8_t navigation;

  typedef uint8_t _communication_type;
  uint8_t communication;

  typedef uint8_t _oavoid_type;
  uint8_t oavoid;

  typedef uint8_t _rollAxis_type;
  uint8_t rollAxis;

  typedef uint8_t _pitchAxis_type;
  uint8_t pitchAxis;

  typedef uint8_t _yawAxis_type;
  uint8_t yawAxis;

  typedef uint8_t _altAxis_type;
  uint8_t altAxis;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxModes"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6ddc58fd5953a0b8a93f392132f7417d"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Navigation mode: SB_NAV_... */\n\
uint8 navigation\n\
# Communication mode: SB_COM_... */\n\
uint8 communication\n\
# Obstacle avoidance mode: or of SB_OA_... */\n\
uint8 oavoid\n\
# Control mode for roll axis: SB_CTRL_... */\n\
uint8 rollAxis\n\
# Control mode for pitch axis: SB_CTRL_... */\n\
uint8 pitchAxis\n\
# Control mode for yaw axis: SB_CTRL_... */\n\
uint8 yawAxis\n\
# Control mode for altitude axis: SB_CTRL_... */\n\
uint8 altAxis\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, navigation);
    ros::serialization::serialize(stream, communication);
    ros::serialization::serialize(stream, oavoid);
    ros::serialization::serialize(stream, rollAxis);
    ros::serialization::serialize(stream, pitchAxis);
    ros::serialization::serialize(stream, yawAxis);
    ros::serialization::serialize(stream, altAxis);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, navigation);
    ros::serialization::deserialize(stream, communication);
    ros::serialization::deserialize(stream, oavoid);
    ros::serialization::deserialize(stream, rollAxis);
    ros::serialization::deserialize(stream, pitchAxis);
    ros::serialization::deserialize(stream, yawAxis);
    ros::serialization::deserialize(stream, altAxis);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(navigation);
    size += ros::serialization::serializationLength(communication);
    size += ros::serialization::serializationLength(oavoid);
    size += ros::serialization::serializationLength(rollAxis);
    size += ros::serialization::serializationLength(pitchAxis);
    size += ros::serialization::serializationLength(yawAxis);
    size += ros::serialization::serializationLength(altAxis);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxModes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxModes_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxModes
typedef  ::coax_msgs::CoaxModes_<std::allocator<void> > CoaxModes;

typedef boost::shared_ptr< ::coax_msgs::CoaxModes> CoaxModesPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxModes const> CoaxModesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::coax_msgs::CoaxModes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::coax_msgs::CoaxModes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxModes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ddc58fd5953a0b8a93f392132f7417d";
  }

  static const char* value(const  ::coax_msgs::CoaxModes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ddc58fd5953a0b8ULL;
  static const uint64_t static_value2 = 0xa93f392132f7417dULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxModes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxModes";
  }

  static const char* value(const  ::coax_msgs::CoaxModes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxModes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Navigation mode: SB_NAV_... */\n\
uint8 navigation\n\
# Communication mode: SB_COM_... */\n\
uint8 communication\n\
# Obstacle avoidance mode: or of SB_OA_... */\n\
uint8 oavoid\n\
# Control mode for roll axis: SB_CTRL_... */\n\
uint8 rollAxis\n\
# Control mode for pitch axis: SB_CTRL_... */\n\
uint8 pitchAxis\n\
# Control mode for yaw axis: SB_CTRL_... */\n\
uint8 yawAxis\n\
# Control mode for altitude axis: SB_CTRL_... */\n\
uint8 altAxis\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxModes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxModes_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxModes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.navigation);
    stream.next(m.communication);
    stream.next(m.oavoid);
    stream.next(m.rollAxis);
    stream.next(m.pitchAxis);
    stream.next(m.yawAxis);
    stream.next(m.altAxis);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxModes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coax_msgs::CoaxModes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::coax_msgs::CoaxModes_<ContainerAllocator> & v) 
  {
    s << indent << "navigation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navigation);
    s << indent << "communication: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication);
    s << indent << "oavoid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.oavoid);
    s << indent << "rollAxis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rollAxis);
    s << indent << "pitchAxis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pitchAxis);
    s << indent << "yawAxis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yawAxis);
    s << indent << "altAxis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.altAxis);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COAX_MSGS_MESSAGE_COAXMODES_H


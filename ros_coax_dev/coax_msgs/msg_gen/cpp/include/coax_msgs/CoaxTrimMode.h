/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/msg/CoaxTrimMode.msg */
#ifndef COAX_MSGS_MESSAGE_COAXTRIMMODE_H
#define COAX_MSGS_MESSAGE_COAXTRIMMODE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxTrimMode_ : public ros::Message
{
  typedef CoaxTrimMode_<ContainerAllocator> Type;

  CoaxTrimMode_()
  : trimMode(0)
  , rollTrim(0.0)
  , pitchTrim(0.0)
  {
  }

  CoaxTrimMode_(const ContainerAllocator& _alloc)
  : trimMode(0)
  , rollTrim(0.0)
  , pitchTrim(0.0)
  {
  }

  typedef uint8_t _trimMode_type;
  uint8_t trimMode;

  typedef float _rollTrim_type;
  float rollTrim;

  typedef float _pitchTrim_type;
  float pitchTrim;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxTrimMode"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0315cef579f853e633299fb30b9c35c1"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Trim mode, can be SB_TRIM_FROM_RC or SB_TRIM_SOFTWARE */\n\
uint8 trimMode \n\
# Trim position for the roll axis */\n\
float32 rollTrim\n\
# Trim position for the pitch axis */\n\
float32 pitchTrim\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, trimMode);
    ros::serialization::serialize(stream, rollTrim);
    ros::serialization::serialize(stream, pitchTrim);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, trimMode);
    ros::serialization::deserialize(stream, rollTrim);
    ros::serialization::deserialize(stream, pitchTrim);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(trimMode);
    size += ros::serialization::serializationLength(rollTrim);
    size += ros::serialization::serializationLength(pitchTrim);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxTrimMode_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxTrimMode
typedef  ::coax_msgs::CoaxTrimMode_<std::allocator<void> > CoaxTrimMode;

typedef boost::shared_ptr< ::coax_msgs::CoaxTrimMode> CoaxTrimModePtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxTrimMode const> CoaxTrimModeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::coax_msgs::CoaxTrimMode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0315cef579f853e633299fb30b9c35c1";
  }

  static const char* value(const  ::coax_msgs::CoaxTrimMode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0315cef579f853e6ULL;
  static const uint64_t static_value2 = 0x33299fb30b9c35c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxTrimMode";
  }

  static const char* value(const  ::coax_msgs::CoaxTrimMode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Trim mode, can be SB_TRIM_FROM_RC or SB_TRIM_SOFTWARE */\n\
uint8 trimMode \n\
# Trim position for the roll axis */\n\
float32 rollTrim\n\
# Trim position for the pitch axis */\n\
float32 pitchTrim\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxTrimMode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trimMode);
    stream.next(m.rollTrim);
    stream.next(m.pitchTrim);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxTrimMode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coax_msgs::CoaxTrimMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::coax_msgs::CoaxTrimMode_<ContainerAllocator> & v) 
  {
    s << indent << "trimMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trimMode);
    s << indent << "rollTrim: ";
    Printer<float>::stream(s, indent + "  ", v.rollTrim);
    s << indent << "pitchTrim: ";
    Printer<float>::stream(s, indent + "  ", v.pitchTrim);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COAX_MSGS_MESSAGE_COAXTRIMMODE_H


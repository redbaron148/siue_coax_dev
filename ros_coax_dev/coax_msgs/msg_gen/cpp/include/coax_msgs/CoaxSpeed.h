/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/msg/CoaxSpeed.msg */
#ifndef COAX_MSGS_MESSAGE_COAXSPEED_H
#define COAX_MSGS_MESSAGE_COAXSPEED_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxSpeed_ : public ros::Message
{
  typedef CoaxSpeed_<ContainerAllocator> Type;

  CoaxSpeed_()
  : state(0)
  , light(0)
  , vel_x(0.0)
  , vel_y(0.0)
  {
  }

  CoaxSpeed_(const ContainerAllocator& _alloc)
  : state(0)
  , light(0)
  , vel_x(0.0)
  , vel_y(0.0)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;

  typedef uint8_t _light_type;
  uint8_t light;

  typedef float _vel_x_type;
  float vel_x;

  typedef float _vel_y_type;
  float vel_y;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxSpeed"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c66c2b729ae81addf32019af30f8271e"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
uint8 state\n\
uint8 light\n\
float32 vel_x\n\
float32 vel_y\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    ros::serialization::serialize(stream, light);
    ros::serialization::serialize(stream, vel_x);
    ros::serialization::serialize(stream, vel_y);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    ros::serialization::deserialize(stream, light);
    ros::serialization::deserialize(stream, vel_x);
    ros::serialization::deserialize(stream, vel_y);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    size += ros::serialization::serializationLength(light);
    size += ros::serialization::serializationLength(vel_x);
    size += ros::serialization::serializationLength(vel_y);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxSpeed_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxSpeed
typedef  ::coax_msgs::CoaxSpeed_<std::allocator<void> > CoaxSpeed;

typedef boost::shared_ptr< ::coax_msgs::CoaxSpeed> CoaxSpeedPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxSpeed const> CoaxSpeedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::coax_msgs::CoaxSpeed_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::coax_msgs::CoaxSpeed_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxSpeed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c66c2b729ae81addf32019af30f8271e";
  }

  static const char* value(const  ::coax_msgs::CoaxSpeed_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc66c2b729ae81addULL;
  static const uint64_t static_value2 = 0xf32019af30f8271eULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxSpeed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxSpeed";
  }

  static const char* value(const  ::coax_msgs::CoaxSpeed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxSpeed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint8 state\n\
uint8 light\n\
float32 vel_x\n\
float32 vel_y\n\
\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxSpeed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::coax_msgs::CoaxSpeed_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxSpeed_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.light);
    stream.next(m.vel_x);
    stream.next(m.vel_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxSpeed_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coax_msgs::CoaxSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::coax_msgs::CoaxSpeed_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light);
    s << indent << "vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COAX_MSGS_MESSAGE_COAXSPEED_H


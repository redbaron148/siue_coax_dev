/* Auto-generated by genmsg_cpp for file /home/aaron/ros_pkgs/siue_coax_dev/ros_coax_dev/coax_msgs/msg/CoaxVersion.msg */
#ifndef COAX_MSGS_MESSAGE_COAXVERSION_H
#define COAX_MSGS_MESSAGE_COAXVERSION_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace coax_msgs
{
template <class ContainerAllocator>
struct CoaxVersion_ : public ros::Message
{
  typedef CoaxVersion_<ContainerAllocator> Type;

  CoaxVersion_()
  : apiVersion(0)
  , controllerVersion(0)
  , imuVersion()
  , compileTime()
  {
  }

  CoaxVersion_(const ContainerAllocator& _alloc)
  : apiVersion(0)
  , controllerVersion(0)
  , imuVersion(_alloc)
  , compileTime(_alloc)
  {
  }

  typedef uint16_t _apiVersion_type;
  uint16_t apiVersion;

  typedef uint16_t _controllerVersion_type;
  uint16_t controllerVersion;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _imuVersion_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  imuVersion;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _compileTime_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  compileTime;


private:
  static const char* __s_getDataType_() { return "coax_msgs/CoaxVersion"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "614a2e1fe797a467bac6f721b97ec4c0"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint16 apiVersion\n\
uint16 controllerVersion\n\
string imuVersion\n\
string compileTime\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, apiVersion);
    ros::serialization::serialize(stream, controllerVersion);
    ros::serialization::serialize(stream, imuVersion);
    ros::serialization::serialize(stream, compileTime);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, apiVersion);
    ros::serialization::deserialize(stream, controllerVersion);
    ros::serialization::deserialize(stream, imuVersion);
    ros::serialization::deserialize(stream, compileTime);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(apiVersion);
    size += ros::serialization::serializationLength(controllerVersion);
    size += ros::serialization::serializationLength(imuVersion);
    size += ros::serialization::serializationLength(compileTime);
    return size;
  }

  typedef boost::shared_ptr< ::coax_msgs::CoaxVersion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coax_msgs::CoaxVersion_<ContainerAllocator>  const> ConstPtr;
}; // struct CoaxVersion
typedef  ::coax_msgs::CoaxVersion_<std::allocator<void> > CoaxVersion;

typedef boost::shared_ptr< ::coax_msgs::CoaxVersion> CoaxVersionPtr;
typedef boost::shared_ptr< ::coax_msgs::CoaxVersion const> CoaxVersionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::coax_msgs::CoaxVersion_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::coax_msgs::CoaxVersion_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace coax_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::coax_msgs::CoaxVersion_<ContainerAllocator> > {
  static const char* value() 
  {
    return "614a2e1fe797a467bac6f721b97ec4c0";
  }

  static const char* value(const  ::coax_msgs::CoaxVersion_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x614a2e1fe797a467ULL;
  static const uint64_t static_value2 = 0xbac6f721b97ec4c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::coax_msgs::CoaxVersion_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coax_msgs/CoaxVersion";
  }

  static const char* value(const  ::coax_msgs::CoaxVersion_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::coax_msgs::CoaxVersion_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16 apiVersion\n\
uint16 controllerVersion\n\
string imuVersion\n\
string compileTime\n\
\n\
";
  }

  static const char* value(const  ::coax_msgs::CoaxVersion_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::coax_msgs::CoaxVersion_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.apiVersion);
    stream.next(m.controllerVersion);
    stream.next(m.imuVersion);
    stream.next(m.compileTime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CoaxVersion_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coax_msgs::CoaxVersion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::coax_msgs::CoaxVersion_<ContainerAllocator> & v) 
  {
    s << indent << "apiVersion: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.apiVersion);
    s << indent << "controllerVersion: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.controllerVersion);
    s << indent << "imuVersion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.imuVersion);
    s << indent << "compileTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.compileTime);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COAX_MSGS_MESSAGE_COAXVERSION_H


"""autogenerated by genmsg_py from CoaxControlParameters.msg. Do not edit."""
import roslib.message
import struct


class CoaxControlParameters(roslib.message.Message):
  _md5sum = "c63db7fc4cf7a25c749b80856e6f5d4d"
  _type = "coax_msgs/CoaxControlParameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Base thrust around which the control operates */
float32 baseThrust
# Difference of operating point between up and down motors */
float32 yawOffset
# Altitude gain: Kp*/
float32 altitudeKp
# Altitude gain: Ki*/
float32 altitudeKi
# Altitude gain: Kd*/
float32 altitudeKd

# Yaw gain: Kp*/
float32 yawKp
# Yaw gain: Ki*/
float32 yawKi
# Yaw gain: Kd*/
float32 yawKd


"""
  __slots__ = ['baseThrust','yawOffset','altitudeKp','altitudeKi','altitudeKd','yawKp','yawKi','yawKd']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       baseThrust,yawOffset,altitudeKp,altitudeKi,altitudeKd,yawKp,yawKi,yawKd
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxControlParameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.baseThrust is None:
        self.baseThrust = 0.
      if self.yawOffset is None:
        self.yawOffset = 0.
      if self.altitudeKp is None:
        self.altitudeKp = 0.
      if self.altitudeKi is None:
        self.altitudeKi = 0.
      if self.altitudeKd is None:
        self.altitudeKd = 0.
      if self.yawKp is None:
        self.yawKp = 0.
      if self.yawKi is None:
        self.yawKi = 0.
      if self.yawKd is None:
        self.yawKd = 0.
    else:
      self.baseThrust = 0.
      self.yawOffset = 0.
      self.altitudeKp = 0.
      self.altitudeKi = 0.
      self.altitudeKd = 0.
      self.yawKp = 0.
      self.yawKi = 0.
      self.yawKd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.baseThrust, _x.yawOffset, _x.altitudeKp, _x.altitudeKi, _x.altitudeKd, _x.yawKp, _x.yawKi, _x.yawKd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.baseThrust, _x.yawOffset, _x.altitudeKp, _x.altitudeKi, _x.altitudeKd, _x.yawKp, _x.yawKi, _x.yawKd,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.baseThrust, _x.yawOffset, _x.altitudeKp, _x.altitudeKi, _x.altitudeKd, _x.yawKp, _x.yawKi, _x.yawKd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.baseThrust, _x.yawOffset, _x.altitudeKp, _x.altitudeKi, _x.altitudeKd, _x.yawKp, _x.yawKi, _x.yawKd,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8f = struct.Struct("<8f")

"""autogenerated by genmsg_py from CoaxModes.msg. Do not edit."""
import roslib.message
import struct


class CoaxModes(roslib.message.Message):
  _md5sum = "6ddc58fd5953a0b8a93f392132f7417d"
  _type = "coax_msgs/CoaxModes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Navigation mode: SB_NAV_... */
uint8 navigation
# Communication mode: SB_COM_... */
uint8 communication
# Obstacle avoidance mode: or of SB_OA_... */
uint8 oavoid
# Control mode for roll axis: SB_CTRL_... */
uint8 rollAxis
# Control mode for pitch axis: SB_CTRL_... */
uint8 pitchAxis
# Control mode for yaw axis: SB_CTRL_... */
uint8 yawAxis
# Control mode for altitude axis: SB_CTRL_... */
uint8 altAxis

"""
  __slots__ = ['navigation','communication','oavoid','rollAxis','pitchAxis','yawAxis','altAxis']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       navigation,communication,oavoid,rollAxis,pitchAxis,yawAxis,altAxis
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxModes, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.navigation is None:
        self.navigation = 0
      if self.communication is None:
        self.communication = 0
      if self.oavoid is None:
        self.oavoid = 0
      if self.rollAxis is None:
        self.rollAxis = 0
      if self.pitchAxis is None:
        self.pitchAxis = 0
      if self.yawAxis is None:
        self.yawAxis = 0
      if self.altAxis is None:
        self.altAxis = 0
    else:
      self.navigation = 0
      self.communication = 0
      self.oavoid = 0
      self.rollAxis = 0
      self.pitchAxis = 0
      self.yawAxis = 0
      self.altAxis = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7B.pack(_x.navigation, _x.communication, _x.oavoid, _x.rollAxis, _x.pitchAxis, _x.yawAxis, _x.altAxis))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.navigation, _x.communication, _x.oavoid, _x.rollAxis, _x.pitchAxis, _x.yawAxis, _x.altAxis,) = _struct_7B.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7B.pack(_x.navigation, _x.communication, _x.oavoid, _x.rollAxis, _x.pitchAxis, _x.yawAxis, _x.altAxis))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.navigation, _x.communication, _x.oavoid, _x.rollAxis, _x.pitchAxis, _x.yawAxis, _x.altAxis,) = _struct_7B.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7B = struct.Struct("<7B")

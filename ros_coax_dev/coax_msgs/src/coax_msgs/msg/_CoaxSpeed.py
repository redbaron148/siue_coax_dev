"""autogenerated by genmsg_py from CoaxSpeed.msg. Do not edit."""
import roslib.message
import struct


class CoaxSpeed(roslib.message.Message):
  _md5sum = "c66c2b729ae81addf32019af30f8271e"
  _type = "coax_msgs/CoaxSpeed"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint8 state
uint8 light
float32 vel_x
float32 vel_y


"""
  __slots__ = ['state','light','vel_x','vel_y']
  _slot_types = ['uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       state,light,vel_x,vel_y
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxSpeed, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.light is None:
        self.light = 0
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
    else:
      self.state = 0
      self.light = 0
      self.vel_x = 0.
      self.vel_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2B2f.pack(_x.state, _x.light, _x.vel_x, _x.vel_y))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.state, _x.light, _x.vel_x, _x.vel_y,) = _struct_2B2f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2B2f.pack(_x.state, _x.light, _x.vel_x, _x.vel_y))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.state, _x.light, _x.vel_x, _x.vel_y,) = _struct_2B2f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2B2f = struct.Struct("<2B2f")

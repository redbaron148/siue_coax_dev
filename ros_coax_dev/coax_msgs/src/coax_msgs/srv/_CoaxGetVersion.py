"""autogenerated by genmsg_py from CoaxGetVersionRequest.msg. Do not edit."""
import roslib.message
import struct


class CoaxGetVersionRequest(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "coax_msgs/CoaxGetVersionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxGetVersionRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from CoaxGetVersionResponse.msg. Do not edit."""
import roslib.message
import struct

import coax_msgs.msg

class CoaxGetVersionResponse(roslib.message.Message):
  _md5sum = "e6b62c09e386f0774fff1cbc20534440"
  _type = "coax_msgs/CoaxGetVersionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """CoaxVersion version



================================================================================
MSG: coax_msgs/CoaxVersion
uint16 apiVersion
uint16 controllerVersion
string imuVersion
string compileTime

"""
  __slots__ = ['version']
  _slot_types = ['coax_msgs/CoaxVersion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       version
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxGetVersionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.version is None:
        self.version = coax_msgs.msg.CoaxVersion()
    else:
      self.version = coax_msgs.msg.CoaxVersion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2H.pack(_x.version.apiVersion, _x.version.controllerVersion))
      _x = self.version.imuVersion
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.version.compileTime
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.version is None:
        self.version = coax_msgs.msg.CoaxVersion()
      end = 0
      _x = self
      start = end
      end += 4
      (_x.version.apiVersion, _x.version.controllerVersion,) = _struct_2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.version.imuVersion = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.version.compileTime = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2H.pack(_x.version.apiVersion, _x.version.controllerVersion))
      _x = self.version.imuVersion
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.version.compileTime
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.version is None:
        self.version = coax_msgs.msg.CoaxVersion()
      end = 0
      _x = self
      start = end
      end += 4
      (_x.version.apiVersion, _x.version.controllerVersion,) = _struct_2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.version.imuVersion = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.version.compileTime = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2H = struct.Struct("<2H")
class CoaxGetVersion(roslib.message.ServiceDefinition):
  _type          = 'coax_msgs/CoaxGetVersion'
  _md5sum = 'e6b62c09e386f0774fff1cbc20534440'
  _request_class  = CoaxGetVersionRequest
  _response_class = CoaxGetVersionResponse

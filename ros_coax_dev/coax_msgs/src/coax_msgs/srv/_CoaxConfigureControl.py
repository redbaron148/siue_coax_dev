"""autogenerated by genmsg_py from CoaxConfigureControlRequest.msg. Do not edit."""
import roslib.message
import struct


class CoaxConfigureControlRequest(roslib.message.Message):
  _md5sum = "a8b3c05573f16bc4305f15f017d3ee1c"
  _type = "coax_msgs/CoaxConfigureControlRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 rollMode
uint16 pitchMode
uint16 yawMode
uint16 altitudeMode

"""
  __slots__ = ['rollMode','pitchMode','yawMode','altitudeMode']
  _slot_types = ['uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       rollMode,pitchMode,yawMode,altitudeMode
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxConfigureControlRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rollMode is None:
        self.rollMode = 0
      if self.pitchMode is None:
        self.pitchMode = 0
      if self.yawMode is None:
        self.yawMode = 0
      if self.altitudeMode is None:
        self.altitudeMode = 0
    else:
      self.rollMode = 0
      self.pitchMode = 0
      self.yawMode = 0
      self.altitudeMode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4H.pack(_x.rollMode, _x.pitchMode, _x.yawMode, _x.altitudeMode))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.rollMode, _x.pitchMode, _x.yawMode, _x.altitudeMode,) = _struct_4H.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4H.pack(_x.rollMode, _x.pitchMode, _x.yawMode, _x.altitudeMode))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.rollMode, _x.pitchMode, _x.yawMode, _x.altitudeMode,) = _struct_4H.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4H = struct.Struct("<4H")
"""autogenerated by genmsg_py from CoaxConfigureControlResponse.msg. Do not edit."""
import roslib.message
import struct


class CoaxConfigureControlResponse(roslib.message.Message):
  _md5sum = "4414c67819626a1b8e0f043a9a0d6c9a"
  _type = "coax_msgs/CoaxConfigureControlResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 result



"""
  __slots__ = ['result']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       result
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxConfigureControlResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.result))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.result))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
class CoaxConfigureControl(roslib.message.ServiceDefinition):
  _type          = 'coax_msgs/CoaxConfigureControl'
  _md5sum = '3612d80e1bf1f78cf318a82336a878bf'
  _request_class  = CoaxConfigureControlRequest
  _response_class = CoaxConfigureControlResponse

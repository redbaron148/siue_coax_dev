"""autogenerated by genmsg_py from CoaxSetControlParametersRequest.msg. Do not edit."""
import roslib.message
import struct

import coax_msgs.msg

class CoaxSetControlParametersRequest(roslib.message.Message):
  _md5sum = "4def45fbd3753b180c424ffdcb35116e"
  _type = "coax_msgs/CoaxSetControlParametersRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """CoaxControlParameters params

================================================================================
MSG: coax_msgs/CoaxControlParameters
# Base thrust around which the control operates */
float32 baseThrust
# Difference of operating point between up and down motors */
float32 yawOffset
# Altitude gain: Kp*/
float32 altitudeKp
# Altitude gain: Ki*/
float32 altitudeKi
# Altitude gain: Kd*/
float32 altitudeKd

# Yaw gain: Kp*/
float32 yawKp
# Yaw gain: Ki*/
float32 yawKi
# Yaw gain: Kd*/
float32 yawKd


"""
  __slots__ = ['params']
  _slot_types = ['coax_msgs/CoaxControlParameters']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       params
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxSetControlParametersRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.params is None:
        self.params = coax_msgs.msg.CoaxControlParameters()
    else:
      self.params = coax_msgs.msg.CoaxControlParameters()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.params.baseThrust, _x.params.yawOffset, _x.params.altitudeKp, _x.params.altitudeKi, _x.params.altitudeKd, _x.params.yawKp, _x.params.yawKi, _x.params.yawKd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.params is None:
        self.params = coax_msgs.msg.CoaxControlParameters()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.params.baseThrust, _x.params.yawOffset, _x.params.altitudeKp, _x.params.altitudeKi, _x.params.altitudeKd, _x.params.yawKp, _x.params.yawKi, _x.params.yawKd,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.params.baseThrust, _x.params.yawOffset, _x.params.altitudeKp, _x.params.altitudeKi, _x.params.altitudeKd, _x.params.yawKp, _x.params.yawKi, _x.params.yawKd))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.params is None:
        self.params = coax_msgs.msg.CoaxControlParameters()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.params.baseThrust, _x.params.yawOffset, _x.params.altitudeKp, _x.params.altitudeKi, _x.params.altitudeKd, _x.params.yawKp, _x.params.yawKi, _x.params.yawKd,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8f = struct.Struct("<8f")
"""autogenerated by genmsg_py from CoaxSetControlParametersResponse.msg. Do not edit."""
import roslib.message
import struct


class CoaxSetControlParametersResponse(roslib.message.Message):
  _md5sum = "4414c67819626a1b8e0f043a9a0d6c9a"
  _type = "coax_msgs/CoaxSetControlParametersResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 result



"""
  __slots__ = ['result']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       result
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxSetControlParametersResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.result))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.result))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
class CoaxSetControlParameters(roslib.message.ServiceDefinition):
  _type          = 'coax_msgs/CoaxSetControlParameters'
  _md5sum = '4ced18bc984a7d80fa03ac2fadfc11ac'
  _request_class  = CoaxSetControlParametersRequest
  _response_class = CoaxSetControlParametersResponse

"""autogenerated by genmsg_py from CoaxGetTrimModeRequest.msg. Do not edit."""
import roslib.message
import struct


class CoaxGetTrimModeRequest(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "coax_msgs/CoaxGetTrimModeRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxGetTrimModeRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from CoaxGetTrimModeResponse.msg. Do not edit."""
import roslib.message
import struct

import coax_msgs.msg

class CoaxGetTrimModeResponse(roslib.message.Message):
  _md5sum = "ebb2d5a0e1488ca7b436e3a43853c58b"
  _type = "coax_msgs/CoaxGetTrimModeResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """CoaxTrimMode mode


================================================================================
MSG: coax_msgs/CoaxTrimMode
# Trim mode, can be SB_TRIM_FROM_RC or SB_TRIM_SOFTWARE */
uint8 trimMode 
# Trim position for the roll axis */
float32 rollTrim
# Trim position for the pitch axis */
float32 pitchTrim


"""
  __slots__ = ['mode']
  _slot_types = ['coax_msgs/CoaxTrimMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       mode
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CoaxGetTrimModeResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = coax_msgs.msg.CoaxTrimMode()
    else:
      self.mode = coax_msgs.msg.CoaxTrimMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_B2f.pack(_x.mode.trimMode, _x.mode.rollTrim, _x.mode.pitchTrim))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.mode is None:
        self.mode = coax_msgs.msg.CoaxTrimMode()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.mode.trimMode, _x.mode.rollTrim, _x.mode.pitchTrim,) = _struct_B2f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_B2f.pack(_x.mode.trimMode, _x.mode.rollTrim, _x.mode.pitchTrim))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.mode is None:
        self.mode = coax_msgs.msg.CoaxTrimMode()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.mode.trimMode, _x.mode.rollTrim, _x.mode.pitchTrim,) = _struct_B2f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B2f = struct.Struct("<B2f")
class CoaxGetTrimMode(roslib.message.ServiceDefinition):
  _type          = 'coax_msgs/CoaxGetTrimMode'
  _md5sum = 'ebb2d5a0e1488ca7b436e3a43853c58b'
  _request_class  = CoaxGetTrimModeRequest
  _response_class = CoaxGetTrimModeResponse

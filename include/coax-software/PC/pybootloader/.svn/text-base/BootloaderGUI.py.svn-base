#!/usr/bin/env python
# 
# All rights reserved.
# 
# Skybotix API is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Skybotix API is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with Skybotix API. If not, see <http://www.gnu.org/licenses/>.
# 

# -*- coding: ANSI_X3.4-1968 -*-
# generated by wxGlade 0.4.1 on Sun Aug 27 00:13:04 2006

import sys
import traceback
import wxversion
wxversion.select('2.8-*')

import wx
import wx.grid
import threading
from SerialLoader import *


class GUIReport(ProgressReport):
    def __init__(self,app):
        self.app = app
    
    def report_percent(self,percent):
        self.app.Percent = percent

    def report_string(self,s):
        self.app.Status = s

class UploadThread(threading.Thread):
    def __init__(self,app,filename,portname,flowctrl,reqreset):
        threading.Thread.__init__(self)
        self.app = app
        self.filename = filename
        self.portname = portname
        self.flowctrl = flowctrl
        self.reqreset = reqreset
        self.abortflag = False

    def request_abort(self):
        self.abortflag = True

    def abort(self):
        return self.abortflag

    def run(self):
        # Load the file
        try:
            print "Trying to load " + repr(self.filename)
            self.app.Status = ("Trying to load " + repr(self.filename))
            self.app.Bootloader.loadFile(self.filename)
            self.app.Status = ('File loaded (%d packets)' %
                    len(self.app.Bootloader.packets))
            self.app.Percent = 0
        except:
            traceback.print_exc()
            self.app.Status = ('Failed to load file')
            self.app.finishUpload()
            return

        # Prepare the port
        try:
            print "Trying to open " + self.portname
            self.app.Status = ("Trying to open " + self.portname)
            self.app.Bootloader.preparePort(self.portname,self.flowctrl)
            self.app.Status = ('Port OK')
        except:
            traceback.print_exc()
            self.app.Status = ('Failed to prepare port')
            self.app.finishUpload()
            return

        self.app.Status = ('Reset the robot to start')
        try:
            report = GUIReport(self.app)
            if self.app.Bootloader.upload(self.reqreset,report,self)==0:
                self.app.Status = ('Upload successful')
            else:
                self.app.Status = ('Upload failed')
        except:
            traceback.print_exc()
            self.app.Status = ('Upload failed')
        self.app.finishUpload()
# End class UploadThread

class BootloaderGUI(wx.Frame):
    def __init__(self, app,  parent):
        self.app = app
        self.filename = ''
        # begin wxGlade: BootloaderGUI.__init__
        wx.Frame.__init__(self, parent,wx.ID_ANY,"COAX Bootloader GUI")
        self.SetBackgroundStyle(wx.BG_STYLE_COLOUR)
        self.SetBackgroundColour(wx.Color(200,200,200))
        
        self.fileText = wx.StaticText(self,-1," File")
        self.fileCtrl = wx.FilePickerCtrl(self,-1,'','Select a file', '*.hex')
        self.fileCtrl.SetMinSize(wx.Size(400,10))
        self.reload = wx.Button(self, -1, "Reload")

        self.portText = wx.StaticText(self,-1," Port")
        self.portSelector = wx.ComboBox(self,-1,'/dev/ttyUSB0',
                choices = ['/dev/ttyUSB0','/dev/ttyUSB1','/dev/rfcomm0','COM4','COM5'])
        self.checkserial = wx.Button(self, -1, "Check")
        
        self.flowCtrl = wx.CheckBox(self,-1,"Flow Control (Xbee)")
        self.sendReset = wx.CheckBox(self,-1,"Send Reset (0xC1)")
        
        self.uploadText = wx.StaticText(self,-1," Progress")
        self.uploadProgress = wx.Gauge(self,-1,100)
        self.uploadProgress.SetMinSize(wx.Size(200,10))
        self.upload = wx.Button(self, -1, "Upload")
        
        
        self.statusLabel = wx.StaticText(self,-1,' Status:')
        self.statusText = wx.TextCtrl(self,-1,style=wx.TE_READONLY)
        self.statusText.SetValue('OK')
        self.quit = wx.Button(self, -1, "Quit")

        self.__set_properties()
        self.__do_layout()

        self.Fit()

        self.Bind(wx.EVT_FILEPICKER_CHANGED, self.filesel_hdler, self.fileCtrl)
        self.Bind(wx.EVT_BUTTON, self.reload_hdler, self.reload)
        self.Bind(wx.EVT_BUTTON, self.check_hdler, self.checkserial)
        self.Bind(wx.EVT_BUTTON, self.upload_hdler, self.upload)
        self.Bind(wx.EVT_BUTTON, self.exit_hdler, self.quit)
        self.Bind(wx.EVT_SIZE,self.on_resize,self)

        # end wxGlade

    def __set_properties(self):
        self.SetSize((714, 471))
        pass

    def __do_layout(self):
        self.topsizer = wx.GridBagSizer(1,1)
        self.topsizer.Add(self.fileText,(0,0),(1,1),wx.ALIGN_CENTER_VERTICAL)
        self.topsizer.Add(self.fileCtrl,(0,1),(1,1),
                wx.CENTER | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        self.topsizer.Add(self.reload,(0,2))

        self.topsizer.Add(self.portText,(1,0),(1,1),wx.ALIGN_CENTER_VERTICAL)
        self.topsizer.Add(self.portSelector,(1,1),(1,1),
                wx.CENTER | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        self.topsizer.Add(self.checkserial,(1,2))
            
        self.topsizer.Add(self.flowCtrl,(2,1),(1,1),wx.ALIGN_CENTER_VERTICAL)
        self.topsizer.Add(self.sendReset,(3,1),(1,1),wx.ALIGN_CENTER_VERTICAL)
        
        self.topsizer.Add(self.uploadText,(4,0),(1,1),wx.ALIGN_CENTER_VERTICAL)
        self.topsizer.Add(self.uploadProgress,(4,1),(1,1),
                wx.CENTER | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        self.topsizer.Add(self.upload,(4,2))

        self.topsizer.Add(self.statusLabel,(5,0),(1,1),
                wx.CENTER | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        self.topsizer.Add(self.statusText,(5,1),(1,1),
                wx.CENTER | wx.ALIGN_CENTER_VERTICAL | wx.EXPAND)
        self.topsizer.Add(self.quit,(5,2))

        self.SetSizer(self.topsizer)
        self.Layout()
        pass

    def on_resize(self,event):
        wz = self.GetSize()
        self.Layout()
        self.Fit()
        event.Skip()

    def filesel_hdler(self,event):
        self.filename = event.GetPath()
        print "File %s selected " % self.filename

    def reload_hdler(self,event):
        if self.app.Uploading:
            self.app.Status = "Command ignored while uploading"
        try:
            print "Trying to load " + repr(self.filename)
            self.app.Bootloader.loadFile(self.filename)
            self.app.Status = ('File uploaded (%d packets)' %
                    len(self.app.Bootloader.packets))
            self.app.Percent = 0
        except:
            traceback.print_exc()
            self.app.Status = ('Failed to load file')

    def check_hdler(self,event):
        if self.app.Uploading:
            self.app.Status = "Command ignored while uploading"
            return
        try:
            print "Trying to open " + self.portSelector.GetValue()
            self.app.Bootloader.preparePort(self.portSelector.GetValue(), \
                    self.flowCtrl.GetValue())
            self.app.Bootloader.releasePort()
            self.app.Status = ('Port OK')
        except:
            traceback.print_exc()
            self.app.Status = ('Failed to prepare port')

    def upload_hdler(self,event):
        if self.app.Uploading:
            if self.app.Percent == 0:
                self.app.Status = "Aborting"
                self.upthread.request_abort()
                self.app.Bootloader.releasePort()
                self.app.Percent = 0
                self.app.Uploading = True
            else:
                self.app.Status = "Command ignored while uploading"
                return
        else:
            self.app.Percent = 0
            self.app.Uploading = True
            self.upload.SetLabel("Abort")
            self.upthread = UploadThread(self.app,self.filename,\
                    self.portSelector.GetValue(), \
                    self.flowCtrl.GetValue(),\
                    self.sendReset.GetValue())
            self.upthread.start()


    def exit_hdler(self, event): # wxGlade: BootloaderGUI.<event_handler>
        if self.app.Uploading:
            if self.app.Percent == 0:
                self.app.Status = "Aborting"
                self.upthread.request_abort()
                self.app.Bootloader.releasePort()
                self.app.Percent = 0
                self.app.Uploading = True
            else:
                self.app.Status = "Command ignored while uploading"
                return
            return
        self.Close(True)

    def status_update(self):
        self.uploadProgress.SetValue(self.app.Percent)
        self.statusText.SetValue(self.app.Status)

    def finishUpload(self):
        self.upload.SetLabel("Upload")

# end of class BootloaderGUI


class BootloaderGUIMain(wx.App):

    def __init__(self,opt):
        wx.App.__init__(self,opt)
        self.Bootloader = SerialLoader()
        self.Uploading = False
        self.Status = 'OK'
        self.Percent = 0
        self.timer = wx.Timer()
        self.timer.Start(500,False)
        self.Bind(wx.EVT_TIMER,self.on_timer)

    def OnInit(self):
        wx.InitAllImageHandlers()
        self.mainframe = BootloaderGUI(self,None)
        self.SetTopWindow(self.mainframe)
        self.mainframe.Show(1)
        return 1

    def finishUpload(self):
        self.mainframe.finishUpload()
        self.Bootloader.releasePort()
        self.Uploading = False
    
    def on_timer(self,event):
        self.mainframe.status_update()

# end of class BootloaderGUIMain


if __name__ == "__main__":
    BootloaderGUI = BootloaderGUIMain(0)
    # BootloaderGUI.Update()
    BootloaderGUI.MainLoop()
